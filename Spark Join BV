**********************1st Example, joining orders and order_items
>>> orders=sc.textFile("/users/cloudera/sqoop_import/all_tables/orders")
>>> ordersMap=orders.map(lambda x: (int(x.split(",")[0]), x.split(",")[1]))

>>> orderItems=sc.textFile("/users/cloudera/sqoop_import/all_tables/order_items")
>>> orderItemsMap=orderItems.map(lambda x: (int(x.split(",")[1]), (int(x.split(",")[2]),float(x.split(",")[4]))))
>>> orderItemsMap.first()
(1, (957, 299.98000000000002))

>>> ordersJoin=ordersMap.join(orderItemsMap)
>>> ordersJoin.first()
(32768, (u'2014-02-12 00:00:00.0', (1073, 199.99000000000001)))

>>> ordersMapJoin=ordersJoin.map(lambda x: x[0])
>>> ordersMapJoin.first()
32768

>>> ordersMapJoin=ordersJoin.map(lambda x: x[1][0])
>>> ordersMapJoin.first()
u'2014-02-12 00:00:00.0'

>>> ordersMapJoin=ordersJoin.map(lambda x: x[1][1][0])
>>> ordersMapJoin.first()
1073

>>> ordersMapJoin=ordersJoin.map(lambda x: x[1][1][1])
>>> ordersMapJoin.first()
199.99000000000001

*************Key value Pair before the reduceByKey to get the daily revenue per product
>>> ordersMapJoin=ordersJoin.map(lambda x: ((x[1][0], x[1][1][0]), x[1][1][1]))
>>> rev=ordersMapJoin.reduceByKey(lambda x, y: x+y)
>>> rev.take(1)
[((u'2014-07-14 00:00:00.0', 1014), 5897.6400000000003)]
-------end of Join and reduce by key

*******************BV
>>> products=open("/home/cloudera/part-m-00003").read().splitlines()
>>> productsMap=dict(map(lambda x: (int(x.split(",")[0]), x.split(",")[2]), products))
>>> productsBV=sc.broadcast(productsMap)
>>> productsBV.value[1018]
'Coleman Scanoe Canoe'
>>> productsBV.value[1019]
"O'Brien Youth Neoprene Life Vest"

***********************Using BV
>>> ordersMapJoin=ordersJoin.map(lambda x: ((x[1][0], productsBV.value[x[1][1][0]]), x[1][1][1]))
>>> ordersMapJoin.first()
((u'2014-02-12 00:00:00.0', 'Pelican Sunstream 100 Kayak'), 199.99000000000001)

**********************2nd Example, joining products and order_items
**********************Using products file from local and join with OrderItems in Hadoop using BV

>>> orders=sc.textFile("/users/cloudera/sqoop_import/all_tables/order_items")
>>> ordersMap=orders.map(lambda x: ( int(x.split(",")[2]), float(x.split(",")[4])))

>>> products=open("/home/cloudera/part-m-00003").read().splitlines()
>>> productsRDD=sc.parallelize(products)
>>> productsJoin=productsRDD.map(lambda x: (int(x.split(",")[0]), x.split(",")[2]))

>>> ordersJoin=ordersMap.join(productsJoin)
>>> ordersJoin.first()
(1073, (199.99000000000001, 'Pelican Sunstream 100 Kayak')) 

>>> ordersFinal=ordersJoin.map(lambda x: (x[0], x[1][0])) --without BV
>>> ordersFinal=ordersJoin.map(lambda x: (productsBV.value[x[0]], x[1][0])) --with BV

>>> orderRV=ordersFinal.reduceByKey(lambda x,y:x+y)
>>> orderRV.first()
('Pelican Maverick 100X Kayak', 13999.599999999993)

###############################Convert RDD into List then Dict and perform join using Broadcast variables 
###############################(products as BV with ordertems)
>>> products=sc.textFile("/users/cloudera/sqoop_import/all_tables/products")
>>> p1=products.collect()
>>> p2=dict(map(lambda x: (int(x.split(",")[0]), x.split(",")[2]),p1))
>>> p2[1340]
u"Majestic Men's Replica Texas Rangers Russell "

>>> productsBV=sc.broadcast(p2)
>>> productsBV.value[1340]
u"Majestic Men's Replica Texas Rangers Russell "
>>> 
>>> orderitems=sc.textFile("/users/cloudera/sqoop_import/all_tables/order_items")
>>> ordersJoin=orderitems.map(lambda x: (int(x.split(",")[2]), x.split(",")[4]))
>>> o1=ordersJoin.map(lambda x: (productsBV.value[x[0]], x[1]))
>>> o1.first()
(u"Diamondback Women's Serene Classic Comfort Bi", u'299.98')
>>> o1=ordersJoin.map(lambda x: (x[0], x[1]))
>>> o1=ordersJoin.map(lambda x: (productsBV.value[x[0]], x[1]))
>>> o1.first()
(u"Diamondback Women's Serene Classic Comfort Bi", u'299.98')











